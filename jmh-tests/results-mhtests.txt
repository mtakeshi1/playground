# JMH version: 1.32
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+36
# VM invoker: /opt/java/19-zulu/bin/java
# VM options: -javaagent:/opt/idea-IC-212.5457.46/lib/idea_rt.jar=45657:/opt/idea-IC-212.5457.46/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: mtakeshi1.playground.MethodHandleTests.manualIfElse

# Run progress: 0,00% complete, ETA 00:05:00
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1188326,950 ns/op
# Warmup Iteration   2: 1120514,576 ns/op
# Warmup Iteration   3: 1101954,224 ns/op
# Warmup Iteration   4: 1096303,414 ns/op
# Warmup Iteration   5: 1114897,227 ns/op
Iteration   1: 1106757,151 ns/op
Iteration   2: 1115964,798 ns/op
Iteration   3: 1118882,307 ns/op
Iteration   4: 1118137,216 ns/op
Iteration   5: 1106389,519 ns/op
# Processing profiler results: LinuxPerfAsmProfiler


Result "mtakeshi1.playground.MethodHandleTests.manualIfElse":
  1113226,198 ±(99.9%) 23752,446 ns/op [Average]
  (min, avg, max) = (1106389,519, 1113226,198, 1118882,307), stdev = 6168,435
  CI (99.9%): [1089473,752, 1136978,644] (assumes normal distribution)

Secondary result "mtakeshi1.playground.MethodHandleTests.manualIfElse:·asm":
PrintAssembly processed: 129799 total address lines.
Perf output processed (skipped 52.276 seconds):
 Column 1: cycles (49811 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, mtakeshi1.playground.MHInstances::manual, version 591 (88 bytes)

              handler table  [0x00007f9894884320,0x00007f9894884398] = 120
             [Disassembly]
             --------------------------------------------------------------------------------
             [Constant Pool (empty)]
             --------------------------------------------------------------------------------
             [Verified Entry Point]
               # {method} {0x00007f98604e5628} &apos;manual&apos; &apos;(Lorg/openjdk/jmh/infra/Blackhole;I)V&apos; in &apos;mtakeshi1/playground/MHInstances&apos;
               # parm0:    rsi:rsi   = &apos;org/openjdk/jmh/infra/Blackhole&apos;
               # parm1:    rdx       = int
               #           [sp+0x20]  (sp of caller)
  0.08%        0x00007f9894884040:   mov    %eax,-0x14000(%rsp)
  1.04%        0x00007f9894884047:   push   %rbp
  1.07%        0x00007f9894884048:   sub    $0x10,%rsp                   ;*synchronization entry
                                                                         ; - mtakeshi1.playground.MHInstances::manual@-1 (line 28)
  0.03%        0x00007f989488404c:   mov    %rsi,%rbp
               0x00007f989488404f:   mov    %edx,%esi
               0x00007f9894884051:   xchg   %ax,%ax
               0x00007f9894884053:   call   0x00007f988ce387a0           ; ImmutableOopMap {rbp=Oop }
                                                                         ;*invokestatic isEven {reexecute=0 rethrow=0 return_oop=0}
                                                                         ; - mtakeshi1.playground.MHInstances::manual@1 (line 28)
                                                                         ;   {static_call}
  1.04%        0x00007f9894884058:   test   %eax,%eax
  0.01%  ╭     0x00007f989488405a:   je     0x00007f9894884076           ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │                                                               ; - mtakeshi1.playground.MHInstances::manual@4 (line 28)
  0.01%  │     0x00007f989488405c:   data16 xchg %ax,%ax
  1.10%  │     0x00007f989488405f:   call   0x00007f989488410f           ; ImmutableOopMap {rbp=Oop }
         │                                                               ;*invokestatic zero {reexecute=0 rethrow=0 return_oop=1}
         │                                                               ; - mtakeshi1.playground.MHInstances::manual@8 (line 29)
         │                                                               ;   {static_call}
 24.30%  │     0x00007f9894884064:   mov    %rax,%rdx
  0.01%  │     0x00007f9894884067:   test   %rbp,%rbp
         │╭    0x00007f989488406a:   je     0x00007f98948840ac           ;*invokevirtual consume {reexecute=0 rethrow=0 return_oop=0}
         ││                                                              ; - mtakeshi1.playground.MHInstances::manual@11 (line 29)
         ││    0x00007f989488406c:   mov    %rbp,%rsi
         ││    0x00007f989488406f:   call   0x00007f988ce38b60           ; ImmutableOopMap {}
         ││                                                              ;*invokespecial consumeFull {reexecute=0 rethrow=0 return_oop=0}
         ││                                                              ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 317)
         ││                                                              ; - mtakeshi1.playground.MHInstances::manual@11 (line 29)
         ││                                                              ;   {optimized virtual_call}
 16.55%  ││╭   0x00007f9894884074:   jmp    0x00007f989488408c
         ↘││   0x00007f9894884076:   nop
          ││   0x00007f9894884077:   call   0x00007f989488412d           ; ImmutableOopMap {rbp=Oop }
          ││                                                             ;*invokestatic one {reexecute=0 rethrow=0 return_oop=1}
          ││                                                             ; - mtakeshi1.playground.MHInstances::manual@18 (line 31)
          ││                                                             ;   {static_call}
 24.25%   ││   0x00007f989488407c:   mov    %rax,%rdx
          ││   0x00007f989488407f:   test   %rbp,%rbp
  0.01%   ││╭  0x00007f9894884082:   je     0x00007f989488409f           ;*invokevirtual consume {reexecute=0 rethrow=0 return_oop=0}
          │││                                                            ; - mtakeshi1.playground.MHInstances::manual@21 (line 31)
          │││  0x00007f9894884084:   mov    %rbp,%rsi
          │││  0x00007f9894884087:   call   0x00007f988ce38b60           ; ImmutableOopMap {}
          │││                                                            ;*invokespecial consumeFull {reexecute=0 rethrow=0 return_oop=0}
          │││                                                            ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 317)
          │││                                                            ; - mtakeshi1.playground.MHInstances::manual@21 (line 31)
          │││                                                            ;   {optimized virtual_call}
 16.73%   │↘│  0x00007f989488408c:   add    $0x10,%rsp
  0.00%   │ │  0x00007f9894884090:   pop    %rbp
          │ │  0x00007f9894884091:   cmp    0x378(%r15),%rsp             ;   {poll_return}
  0.02%   │ │  0x00007f9894884098:   ja     0x00007f98948840dd
          │ │  0x00007f989488409e:   ret
          │ ↘  0x00007f989488409f:   mov    $0xfffffff6,%esi
          │    0x00007f98948840a4:   mov    %rax,%rbp
          │    0x00007f98948840a7:   call   0x00007f9894320200           ; ImmutableOopMap {rbp=Oop }
          │                                                              ;*invokevirtual consume {reexecute=0 rethrow=0 return_oop=0}
          │                                                              ; - mtakeshi1.playground.MHInstances::manual@21 (line 31)
          │                                                              ;   {runtime_call UncommonTrapBlob}
          ↘    0x00007f98948840ac:   mov    $0xfffffff6,%esi
               0x00007f98948840b1:   mov    %rax,%rbp
               0x00007f98948840b4:   data16 xchg %ax,%ax
....................................................................................................
 86.25%  <total for region 1>

....[Hottest Regions]...............................................................................
 86.25%         c2, level 4  mtakeshi1.playground.MHInstances::manual, version 591 (88 bytes)
  4.51%         c2, level 4  mtakeshi1.playground.MHInstances::isEven, version 592 (52 bytes)
  4.37%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 593 (65 bytes)
  2.23%         c2, level 4  mtakeshi1.playground.MethodHandleTests::manualIfElse, version 596 (16 bytes)
  1.16%         c1, level 1  mtakeshi1.playground.MHInstances::zero, version 585 (19 bytes)
  1.05%         c1, level 1  mtakeshi1.playground.MHInstances::one, version 586 (34 bytes)
  0.02%           libjvm.so  ElfSymbolTable::lookup (42 bytes)
  0.01%   [kernel.kallsyms]  x86_pmu_enable_all (0 bytes)
  0.01%   [kernel.kallsyms]  _raw_spin_lock_irqsave (0 bytes)
  0.01%   [kernel.kallsyms]  __x86_return_thunk (5 bytes)
  0.01%   [kernel.kallsyms]  raw_spin_rq_unlock (0 bytes)
  0.01%   [kernel.kallsyms]  finish_task_switch.isra.0 (0 bytes)
  0.01%   [kernel.kallsyms]  apparmor_file_permission (10 bytes)
  0.01%   [kernel.kallsyms]  copy_user_generic_string (9 bytes)
  0.01%   [kernel.kallsyms]  __entry_text_start (12 bytes)
  0.01%   [kernel.kallsyms]  native_read_msr (0 bytes)
  0.01%   [kernel.kallsyms]  mutex_spin_on_owner (12 bytes)
  0.01%   [kernel.kallsyms]  entry_SYSCALL_64_after_hwframe (0 bytes)
  0.01%           libc.so.6  __memmove_avx_unaligned_erms (19 bytes)
  0.00%   [kernel.kallsyms]  read_tsc (0 bytes)
  0.31%  <...other 136 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 86.25%         c2, level 4  mtakeshi1.playground.MHInstances::manual, version 591
  4.51%         c2, level 4  mtakeshi1.playground.MHInstances::isEven, version 592
  4.37%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 593
  2.23%         c2, level 4  mtakeshi1.playground.MethodHandleTests::manualIfElse, version 596
  1.16%         c1, level 1  mtakeshi1.playground.MHInstances::zero, version 585
  1.05%         c1, level 1  mtakeshi1.playground.MHInstances::one, version 586
  0.02%           libjvm.so  ElfSymbolTable::lookup
  0.01%   [kernel.kallsyms]  copy_user_generic_string
  0.01%      hsdis-amd64.so  print_insn
  0.01%   [kernel.kallsyms]  x86_pmu_enable_all
  0.01%   [kernel.kallsyms]  apparmor_file_permission
  0.01%   [kernel.kallsyms]  _raw_spin_lock_irqsave
  0.01%   [kernel.kallsyms]  __x86_return_thunk
  0.01%   [kernel.kallsyms]  __entry_text_start
  0.01%   [kernel.kallsyms]  finish_task_switch.isra.0
  0.01%   [kernel.kallsyms]  raw_spin_rq_unlock
  0.01%           libc.so.6  __memmove_avx_unaligned_erms
  0.01%   [kernel.kallsyms]  __update_load_avg_se
  0.01%   [kernel.kallsyms]  mutex_spin_on_owner
  0.01%   [kernel.kallsyms]  native_read_msr
  0.29%  <...other 115 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 97.36%         c2, level 4
  2.21%         c1, level 1
  0.29%   [kernel.kallsyms]
  0.08%           libjvm.so
  0.03%           libc.so.6
  0.01%      hsdis-amd64.so
  0.01%         interpreter
  0.00%         c1, level 3
  0.00%              kvm.ko
  0.00%    Unknown, level 0
....................................................................................................
100.00%  <totals>



# JMH version: 1.32
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+36
# VM invoker: /opt/java/19-zulu/bin/java
# VM options: -javaagent:/opt/idea-IC-212.5457.46/lib/idea_rt.jar=45657:/opt/idea-IC-212.5457.46/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: mtakeshi1.playground.MethodHandleTests.methodHandleExact

# Run progress: 33,33% complete, ETA 00:03:28
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1028734,845 ns/op
# Warmup Iteration   2: 1011652,520 ns/op
# Warmup Iteration   3: 1008636,105 ns/op
# Warmup Iteration   4: 998978,685 ns/op
# Warmup Iteration   5: 996277,533 ns/op
Iteration   1: 998132,913 ns/op
Iteration   2: 1015385,781 ns/op
Iteration   3: 1012838,424 ns/op
Iteration   4: 1013345,775 ns/op
Iteration   5: 1000897,079 ns/op
# Processing profiler results: LinuxPerfAsmProfiler


Result "mtakeshi1.playground.MethodHandleTests.methodHandleExact":
  1008119,994 ±(99.9%) 30701,268 ns/op [Average]
  (min, avg, max) = (998132,913, 1008119,994, 1015385,781), stdev = 7973,022
  CI (99.9%): [977418,726, 1038821,262] (assumes normal distribution)

Secondary result "mtakeshi1.playground.MethodHandleTests.methodHandleExact:·asm":
PrintAssembly processed: 145777 total address lines.
Perf output processed (skipped 52.314 seconds):
 Column 1: cycles (49855 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, mtakeshi1.playground.MethodHandleTests::methodHandleExact, version 665 (52 bytes)

                0x00007f8454889ce7:   push   %rbp
                0x00007f8454889ce8:   sub    $0x20,%rsp                   ;*synchronization entry
                                                                          ; - mtakeshi1.playground.MethodHandleTests::methodHandleExact@-1 (line 30)
                0x00007f8454889cec:   mov    %rdx,(%rsp)
                0x00007f8454889cf0:   test   %rdx,%rdx
         ╭      0x00007f8454889cf3:   je     0x00007f8454889d4c
         │      0x00007f8454889cf5:   xor    %ebp,%ebp
         │╭     0x00007f8454889cf7:   jmp    0x00007f8454889d1e
         ││     0x00007f8454889cf9:   nopl   0x0(%rax)
         ││ ↗   0x00007f8454889d00:   data16 xchg %ax,%ax
  0.01%  ││ │   0x00007f8454889d03:   call   0x00007f8454885ea0           ; ImmutableOopMap {[0]=Oop }
         ││ │                                                             ;*invokestatic linkToStatic {reexecute=0 rethrow=0 return_oop=1}
         ││ │                                                             ; - java.lang.invoke.DirectMethodHandle$Holder::invokeStatic@9
         ││ │                                                             ; - java.lang.invoke.LambdaForm$MH/0x000000080102f000::invoke@12
         ││ │                                                             ; - java.lang.invoke.DelegatingMethodHandle$Holder::delegate@13
         ││ │                                                             ; - java.lang.invoke.LambdaForm$MH/0x0000000801081000::guard@96
         ││ │                                                             ; - java.lang.invoke.LambdaForm$MH/0x0000000801080c00::invokeExact_MT@19
         ││ │                                                             ; - mtakeshi1.playground.MethodHandleTests::methodHandleExact@13 (line 31)
         ││ │                                                             ;   {static_call mtakeshi1.playground.MHInstances::one}
 24.67%  ││ │   0x00007f8454889d08:   mov    %rax,%rdx                    ;*areturn {reexecute=0 rethrow=0 return_oop=0}
         ││ │                                                             ; - java.lang.invoke.LambdaForm$MH/0x0000000801081000::guard@99
         ││ │                                                             ; - java.lang.invoke.LambdaForm$MH/0x0000000801080c00::invokeExact_MT@19
         ││ │                                                             ; - mtakeshi1.playground.MethodHandleTests::methodHandleExact@13 (line 31)
  0.02%  ││ │↗  0x00007f8454889d0b:   mov    (%rsp),%rsi
         ││ ││  0x00007f8454889d0f:   call   0x00007f8454888240           ; ImmutableOopMap {[0]=Oop }
         ││ ││                                                            ;*invokespecial consumeFull {reexecute=0 rethrow=0 return_oop=0}
         ││ ││                                                            ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 317)
         ││ ││                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleExact@16 (line 31)
         ││ ││                                                            ;   {optimized virtual_call}
 35.91%  ││ ││  0x00007f8454889d14:   inc    %ebp                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         ││ ││                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleExact@19 (line 30)
  0.03%  ││ ││  0x00007f8454889d16:   cmp    $0x186a0,%ebp
         ││╭││  0x00007f8454889d1c:   jge    0x00007f8454889d39           ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
         │││││                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleExact@8 (line 31)
         │↘│││  0x00007f8454889d1e:   mov    %ebp,%esi
         │ │││  0x00007f8454889d20:   data16 xchg %ax,%ax
         │ │││  0x00007f8454889d23:   call   0x00007f8454887400           ; ImmutableOopMap {[0]=Oop }
         │ │││                                                            ;*invokestatic linkToStatic {reexecute=0 rethrow=0 return_oop=0}
         │ │││                                                            ; - java.lang.invoke.DirectMethodHandle$Holder::invokeStatic@10
         │ │││                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801081000::guard@39
         │ │││                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801080c00::invokeExact_MT@19
         │ │││                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleExact@13 (line 31)
         │ │││                                                            ;   {static_call mtakeshi1.playground.MHInstances::isEven}
  0.02%  │ │││  0x00007f8454889d28:   test   %eax,%eax
  0.02%  │ │╰│  0x00007f8454889d2a:   je     0x00007f8454889d00           ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │ │ │                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801081000::guard@62
         │ │ │                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801080c00::invokeExact_MT@19
         │ │ │                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleExact@13 (line 31)
         │ │ │  0x00007f8454889d2c:   data16 xchg %ax,%ax
  0.01%  │ │ │  0x00007f8454889d2f:   call   0x00007f84548864a0           ; ImmutableOopMap {[0]=Oop }
         │ │ │                                                            ;*invokestatic linkToStatic {reexecute=0 rethrow=0 return_oop=1}
         │ │ │                                                            ; - java.lang.invoke.DirectMethodHandle$Holder::invokeStatic@9
         │ │ │                                                            ; - java.lang.invoke.LambdaForm$MH/0x000000080102f000::invoke@12
         │ │ │                                                            ; - java.lang.invoke.DelegatingMethodHandle$Holder::delegate@13
         │ │ │                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801081000::guard@77
         │ │ │                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801080c00::invokeExact_MT@19
         │ │ │                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleExact@13 (line 31)
         │ │ │                                                            ;   {static_call mtakeshi1.playground.MHInstances::zero}
 24.02%  │ │ │  0x00007f8454889d34:   mov    %rax,%rdx
  0.00%  │ │ ╰  0x00007f8454889d37:   jmp    0x00007f8454889d0b
         │ ↘    0x00007f8454889d39:   add    $0x20,%rsp
         │      0x00007f8454889d3d:   pop    %rbp
         │      0x00007f8454889d3e:   cmp    0x378(%r15),%rsp             ;   {poll_return}
         │      0x00007f8454889d45:   ja     0x00007f8454889d78
         │      0x00007f8454889d4b:   ret
         ↘      0x00007f8454889d4c:   mov    $0xffffff76,%esi
                0x00007f8454889d51:   mov    %rdx,%rbp
                0x00007f8454889d54:   data16 xchg %ax,%ax
                0x00007f8454889d57:   call   0x00007f8454320200           ; ImmutableOopMap {rbp=Oop }
                                                                          ;*if_icmpge {reexecute=1 rethrow=0 return_oop=0}
....................................................................................................
 84.70%  <total for region 1>

....[Hottest Regions]...............................................................................
 84.70%           c2, level 4  mtakeshi1.playground.MethodHandleTests::methodHandleExact, version 665 (52 bytes)
  4.98%           c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 659 (64 bytes)
  4.78%           c2, level 4  mtakeshi1.playground.MHInstances::isEven, version 655 (39 bytes)
  2.60%           c1, level 1  mtakeshi1.playground.MHInstances::zero, version 637 (34 bytes)
  2.40%           c1, level 1  mtakeshi1.playground.MHInstances::one, version 638 (34 bytes)
  0.02%     [kernel.kallsyms]  x86_pmu_enable_all (0 bytes)
  0.02%             libjvm.so  ElfSymbolTable::lookup (38 bytes)
  0.02%     [kernel.kallsyms]  finish_task_switch.isra.0 (0 bytes)
  0.01%     [kernel.kallsyms]  timekeeping_advance (53 bytes)
  0.01%     [kernel.kallsyms]  read_tsc (0 bytes)
  0.01%     [kernel.kallsyms]  __entry_text_start (43 bytes)
  0.01%     [kernel.kallsyms]  copy_user_generic_string (7 bytes)
  0.01%     [kernel.kallsyms]  syscall_exit_to_user_mode (39 bytes)
  0.01%     [kernel.kallsyms]  schedule (0 bytes)
  0.01%     [kernel.kallsyms]  mutex_lock (6 bytes)
  0.01%     [kernel.kallsyms]  _raw_spin_lock (0 bytes)
  0.01%     [kernel.kallsyms]  asm_sysvec_apic_timer_interrupt (0 bytes)
  0.01%             libc.so.6  __GI___libc_write (0 bytes)
  0.01%     [kernel.kallsyms]  fpregs_assert_state_consistent (13 bytes)
  0.01%     [kernel.kallsyms]  wait_for_stable_page (7 bytes)
  0.39%  <...other 165 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 84.70%           c2, level 4  mtakeshi1.playground.MethodHandleTests::methodHandleExact, version 665
  4.98%           c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 659
  4.78%           c2, level 4  mtakeshi1.playground.MHInstances::isEven, version 655
  2.60%           c1, level 1  mtakeshi1.playground.MHInstances::zero, version 637
  2.40%           c1, level 1  mtakeshi1.playground.MHInstances::one, version 638
  0.02%             libjvm.so  ElfSymbolTable::lookup
  0.02%     [kernel.kallsyms]  x86_pmu_enable_all
  0.02%             libc.so.6  __vfprintf_internal
  0.02%     [kernel.kallsyms]  finish_task_switch.isra.0
  0.01%     [kernel.kallsyms]  timekeeping_advance
  0.01%     [kernel.kallsyms]  __update_load_avg_cfs_rq
  0.01%     [kernel.kallsyms]  pipe_write
  0.01%     [kernel.kallsyms]  copy_user_generic_string
  0.01%             libc.so.6  __GI___libc_write
  0.01%     [kernel.kallsyms]  __entry_text_start
  0.01%     [kernel.kallsyms]  exit_to_user_mode_prepare
  0.01%     [kernel.kallsyms]  read_tsc
  0.01%     [kernel.kallsyms]  do_syscall_64
  0.01%     [kernel.kallsyms]  syscall_exit_to_user_mode
  0.01%     [kernel.kallsyms]  mutex_lock
  0.36%  <...other 126 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 94.46%           c2, level 4
  5.00%           c1, level 1
  0.35%     [kernel.kallsyms]
  0.10%             libjvm.so
  0.06%             libc.so.6
  0.01%        hsdis-amd64.so
  0.01%           interpreter
  0.01%                kvm.ko
  0.00%           c1, level 3
  0.00%          ip_tables.ko
  0.00%             nvidia.ko
  0.00%          runtime stub
  0.00%  ld-linux-x86-64.so.2
....................................................................................................
100.00%  <totals>



# JMH version: 1.32
# VM version: JDK 19, OpenJDK 64-Bit Server VM, 19+36
# VM invoker: /opt/java/19-zulu/bin/java
# VM options: -javaagent:/opt/idea-IC-212.5457.46/lib/idea_rt.jar=45657:/opt/idea-IC-212.5457.46/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: mtakeshi1.playground.MethodHandleTests.methodHandleInvoke

# Run progress: 66,67% complete, ETA 00:01:44
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1027026,387 ns/op
# Warmup Iteration   2: 1009721,974 ns/op
# Warmup Iteration   3: 1016153,446 ns/op
# Warmup Iteration   4: 1030201,688 ns/op
# Warmup Iteration   5: 1029384,098 ns/op
Iteration   1: 1012690,074 ns/op
Iteration   2: 1010829,014 ns/op
Iteration   3: 1008256,153 ns/op
Iteration   4: 1013035,364 ns/op
Iteration   5: 1009062,935 ns/op
# Processing profiler results: LinuxPerfAsmProfiler


Result "mtakeshi1.playground.MethodHandleTests.methodHandleInvoke":
  1010774,708 ±(99.9%) 8181,016 ns/op [Average]
  (min, avg, max) = (1008256,153, 1010774,708, 1013035,364), stdev = 2124,584
  CI (99.9%): [1002593,692, 1018955,724] (assumes normal distribution)

Secondary result "mtakeshi1.playground.MethodHandleTests.methodHandleInvoke:·asm":
PrintAssembly processed: 130414 total address lines.
Perf output processed (skipped 52.165 seconds):
 Column 1: cycles (49702 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, mtakeshi1.playground.MethodHandleTests::methodHandleInvoke, version 615 (49 bytes)

              0x00007f817c889260:   mov    %eax,-0x14000(%rsp)
              0x00007f817c889267:   push   %rbp
              0x00007f817c889268:   sub    $0x20,%rsp                   ;*synchronization entry
                                                                        ; - mtakeshi1.playground.MethodHandleTests::methodHandleInvoke@-1 (line 37)
              0x00007f817c88926c:   mov    %rdx,(%rsp)
              0x00007f817c889270:   test   %rdx,%rdx
              0x00007f817c889273:   je     0x00007f817c8892c4
              0x00007f817c889275:   xor    %ebp,%ebp
         ╭    0x00007f817c889277:   jmp    0x00007f817c889296
         │↗   0x00007f817c889279:   xchg   %ax,%ax
  0.00%  ││   0x00007f817c88927b:   call   0x00007f817c31b580           ; ImmutableOopMap {[0]=Oop }
         ││                                                             ;*invokestatic linkToStatic {reexecute=0 rethrow=0 return_oop=1}
         ││                                                             ; - java.lang.invoke.DirectMethodHandle$Holder::invokeStatic@9
         ││                                                             ; - java.lang.invoke.LambdaForm$MH/0x000000080102f000::invoke@12
         ││                                                             ; - java.lang.invoke.DelegatingMethodHandle$Holder::delegate@13
         ││                                                             ; - java.lang.invoke.LambdaForm$MH/0x0000000801081000::guard@96
         ││                                                             ; - java.lang.invoke.LambdaForm$MH/0x0000000801080c00::invoke_MT@18
         ││                                                             ; - mtakeshi1.playground.MethodHandleTests::methodHandleInvoke@13 (line 38)
         ││                                                             ;   {static_call mtakeshi1.playground.MHInstances::one}
 24.53%  ││   0x00007f817c889280:   mov    %rax,%rdx                    ;*areturn {reexecute=0 rethrow=0 return_oop=0}
         ││                                                             ; - java.lang.invoke.LambdaForm$MH/0x0000000801081000::guard@99
         ││                                                             ; - java.lang.invoke.LambdaForm$MH/0x0000000801080c00::invoke_MT@18
         ││                                                             ; - mtakeshi1.playground.MethodHandleTests::methodHandleInvoke@13 (line 38)
  0.01%  ││↗  0x00007f817c889283:   mov    (%rsp),%rsi
         │││  0x00007f817c889287:   call   0x00007f817c31af80           ; ImmutableOopMap {[0]=Oop }
         │││                                                            ;*invokespecial consumeFull {reexecute=0 rethrow=0 return_oop=0}
         │││                                                            ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 317)
         │││                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleInvoke@16 (line 38)
         │││                                                            ;   {optimized virtual_call}
 36.01%  │││  0x00007f817c88928c:   inc    %ebp                         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │││                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleInvoke@19 (line 37)
  0.01%  │││  0x00007f817c88928e:   cmp    $0x186a0,%ebp
  0.00%  │││  0x00007f817c889294:   jge    0x00007f817c8892b1           ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
         │││                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleInvoke@8 (line 38)
         ↘││  0x00007f817c889296:   mov    %ebp,%esi
          ││  0x00007f817c889298:   data16 xchg %ax,%ax
          ││  0x00007f817c88929b:   call   0x00007f817c886a00           ; ImmutableOopMap {[0]=Oop }
          ││                                                            ;*invokestatic linkToStatic {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - java.lang.invoke.DirectMethodHandle$Holder::invokeStatic@10
          ││                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801081000::guard@39
          ││                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801080c00::invoke_MT@18
          ││                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleInvoke@13 (line 38)
          ││                                                            ;   {static_call mtakeshi1.playground.MHInstances::isEven}
  0.01%   ││  0x00007f817c8892a0:   test   %eax,%eax
  0.00%   ╰│  0x00007f817c8892a2:   je     0x00007f817c889279           ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801081000::guard@62
           │                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801080c00::invoke_MT@18
           │                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleInvoke@13 (line 38)
           │  0x00007f817c8892a4:   data16 xchg %ax,%ax
           │  0x00007f817c8892a7:   call   0x00007f817c884e20           ; ImmutableOopMap {[0]=Oop }
           │                                                            ;*invokestatic linkToStatic {reexecute=0 rethrow=0 return_oop=1}
           │                                                            ; - java.lang.invoke.DirectMethodHandle$Holder::invokeStatic@9
           │                                                            ; - java.lang.invoke.LambdaForm$MH/0x000000080102f000::invoke@12
           │                                                            ; - java.lang.invoke.DelegatingMethodHandle$Holder::delegate@13
           │                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801081000::guard@77
           │                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000801080c00::invoke_MT@18
           │                                                            ; - mtakeshi1.playground.MethodHandleTests::methodHandleInvoke@13 (line 38)
           │                                                            ;   {static_call mtakeshi1.playground.MHInstances::zero}
 24.35%    │  0x00007f817c8892ac:   mov    %rax,%rdx
           ╰  0x00007f817c8892af:   jmp    0x00007f817c889283
              0x00007f817c8892b1:   add    $0x20,%rsp
....................................................................................................
 84.93%  <total for region 1>

....[Hottest Regions]...............................................................................
 84.93%         c2, level 4  mtakeshi1.playground.MethodHandleTests::methodHandleInvoke, version 615 (49 bytes)
  5.01%         c2, level 4  mtakeshi1.playground.MHInstances::isEven, version 605 (39 bytes)
  4.88%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 609 (64 bytes)
  2.57%         c1, level 1  mtakeshi1.playground.MHInstances::zero, version 583 (34 bytes)
  2.39%         c1, level 1  mtakeshi1.playground.MHInstances::one, version 584 (34 bytes)
  0.03%   [kernel.kallsyms]  x86_pmu_enable (5 bytes)
  0.01%   [kernel.kallsyms]  x86_pmu_enable_all (0 bytes)
  0.01%   [kernel.kallsyms]  native_write_msr (0 bytes)
  0.01%   [kernel.kallsyms]  raw_spin_rq_unlock (0 bytes)
  0.01%   [kernel.kallsyms]  __perf_event_task_sched_in (0 bytes)
  0.00%   [kernel.kallsyms]  read_tsc (0 bytes)
  0.00%   [kernel.kallsyms]  native_read_msr (0 bytes)
  0.00%   [kernel.kallsyms]  crc32c_pcl_intel_update (0 bytes)
  0.00%   [kernel.kallsyms]  copy_user_generic_string (0 bytes)
  0.00%   [kernel.kallsyms]  sync_regs (27 bytes)
  0.00%   [kernel.kallsyms]  __entry_text_start (0 bytes)
  0.00%   [kernel.kallsyms]  prepare_task_switch (0 bytes)
  0.00%   [kernel.kallsyms]  check_preempt_curr (0 bytes)
  0.00%   [kernel.kallsyms]  send_call_function_single_ipi (0 bytes)
  0.00%   [kernel.kallsyms]  scheduler_tick (0 bytes)
  0.12%  <...other 60 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 84.93%         c2, level 4  mtakeshi1.playground.MethodHandleTests::methodHandleInvoke, version 615
  5.01%         c2, level 4  mtakeshi1.playground.MHInstances::isEven, version 605
  4.88%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 609
  2.57%         c1, level 1  mtakeshi1.playground.MHInstances::zero, version 583
  2.39%         c1, level 1  mtakeshi1.playground.MHInstances::one, version 584
  0.03%   [kernel.kallsyms]  x86_pmu_enable
  0.01%   [kernel.kallsyms]  __perf_event_task_sched_in
  0.01%   [kernel.kallsyms]  raw_spin_rq_unlock
  0.01%   [kernel.kallsyms]  native_write_msr
  0.01%   [kernel.kallsyms]  x86_pmu_enable_all
  0.00%   [kernel.kallsyms]  crc32c_pcl_intel_update
  0.00%   [kernel.kallsyms]  __update_load_avg_cfs_rq
  0.00%   [kernel.kallsyms]  native_read_msr
  0.00%   [kernel.kallsyms]  read_tsc
  0.00%   [kernel.kallsyms]  __entry_text_start
  0.00%   [kernel.kallsyms]  sync_regs
  0.00%   [kernel.kallsyms]  pipe_write
  0.00%   [kernel.kallsyms]  copy_user_generic_string
  0.00%   [kernel.kallsyms]  _raw_spin_lock_irq
  0.00%           libc.so.6  __vsnprintf_internal
  0.12%  <...other 58 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 94.82%         c2, level 4
  4.96%         c1, level 1
  0.18%   [kernel.kallsyms]
  0.03%           libjvm.so
  0.00%         c1, level 3
  0.00%         interpreter
  0.00%           libc.so.6
  0.00%      perf-30531.map
  0.00%              kvm.ko
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:05:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
MethodHandleTests.manualIfElse             avgt    5  1113226,198 ± 23752,446  ns/op
MethodHandleTests.manualIfElse:·asm        avgt               NaN                ---
MethodHandleTests.methodHandleExact        avgt    5  1008119,994 ± 30701,268  ns/op
MethodHandleTests.methodHandleExact:·asm   avgt               NaN                ---
MethodHandleTests.methodHandleInvoke       avgt    5  1010774,708 ±  8181,016  ns/op
MethodHandleTests.methodHandleInvoke:·asm  avgt               NaN                ---

Process finished with exit code 0
